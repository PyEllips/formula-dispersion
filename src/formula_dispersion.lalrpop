use std::str::FromStr;
use lalrpop_util::ParseError;
use numpy::ndarray::{ArrayView1, Array1, Zip};
use num_complex::Complex64;

grammar(x_axis_name: &str, x_axis_values: &ArrayView1<'_, f64>);

pub Expr: Array1<Complex64> = {
    <l:Expr> "+" <r:Factor> => l + r,
    <l:Expr> "-" <r:Factor> => l - r,
    Factor,
};

Factor: Array1<Complex64> = {
    <l:Factor> "*" <r:Power> => l * r,
    <l:Factor> "/" <r:Power> => l / r,
    Power,
};

Power: Array1<Complex64> = {
    <l:Term> "**" <r:Term> => Zip::from(&l).and(&r).map_collect(|base, &exp| (*base).powc(exp)),
    Term,
}

Term: Array1<Complex64> = {
    Num,
    "(" <Expr> ")",
};

Num: Array1<Complex64> = {
    r"[a-zA-Z][a-zA-Z0-9]*" =>? match <> {
        x if x == x_axis_name => Ok(Array1::<Complex64>::zeros(x_axis_values.len()) + x_axis_values),
        _ => Err(ParseError::User { error: "Unknown token"}),
    },
    r"[0-9]+(\.[0-9]*)?" => Complex64::from_str(<>).unwrap() + Array1::<Complex64>::zeros(x_axis_values.len())
};